
sort_kw = True

    @pytest.mark.parametrize("sort_kw", [True, False, None])
    def test_suppress_future_warning_with_sort_kw(sort_kw):
        a = DataFrame({"col1": [1, 2]}, index=["c", "a"])
    
        b = DataFrame({"col2": [4, 5]}, index=["b", "a"])
    
        c = DataFrame({"col3": [7, 8]}, index=["a", "b"])
    
        expected = DataFrame(
            {
                "col1": {"a": 2.0, "b": float("nan"), "c": 1.0},
                "col2": {"a": 5.0, "b": 4.0, "c": float("nan")},
                "col3": {"a": 7.0, "b": 8.0, "c": float("nan")},
            }
        )
        if sort_kw is False:
            expected = expected.reindex(index=["c", "a", "b"])
    
        if sort_kw is None:
            # only warn if not explicitly specified
            ctx = tm.assert_produces_warning(FutureWarning, check_stacklevel=False)
        else:
            ctx = tm.assert_produces_warning(None, check_stacklevel=False)
    
        with ctx:
>           result = a.join([b, c], how="outer", sort=sort_kw)

pandas/tests/frame/test_join.py:223: 

self = <contextlib._GeneratorContextManager object at 0x7fa80b6a2dc0>
type = None, value = None, traceback = None

    def __exit__(self, type, value, traceback):
        if type is None:
            try:
>               next(self.gen)
E               AssertionError: Caused unexpected warning(s): [('FutureWarning', FutureWarning("Sorting because non-concatenation axis is not aligned. A future version\nof pandas will change to not sort by default.\n\nTo accept the future behavior, pass 'sort=False'.\n\nTo retain the current behavior and silence the warning, pass 'sort=True'.\n"), '/home/user/BugsInPy/temp/projects/pandas/pandas/core/frame.py', 7216)].

/opt/conda/envs/775655ef980447a42ac9606500def970/lib/python3.8/contextlib.py:120: AssertionError

sort_kw = False

    @pytest.mark.parametrize("sort_kw", [True, False, None])
    def test_suppress_future_warning_with_sort_kw(sort_kw):
        a = DataFrame({"col1": [1, 2]}, index=["c", "a"])
    
        b = DataFrame({"col2": [4, 5]}, index=["b", "a"])
    
        c = DataFrame({"col3": [7, 8]}, index=["a", "b"])
    
        expected = DataFrame(
            {
                "col1": {"a": 2.0, "b": float("nan"), "c": 1.0},
                "col2": {"a": 5.0, "b": 4.0, "c": float("nan")},
                "col3": {"a": 7.0, "b": 8.0, "c": float("nan")},
            }
        )
        if sort_kw is False:
            expected = expected.reindex(index=["c", "a", "b"])
    
        if sort_kw is None:
            # only warn if not explicitly specified
            ctx = tm.assert_produces_warning(FutureWarning, check_stacklevel=False)
        else:
            ctx = tm.assert_produces_warning(None, check_stacklevel=False)
    
        with ctx:
>           result = a.join([b, c], how="outer", sort=sort_kw)

pandas/tests/frame/test_join.py:223: 

self = <contextlib._GeneratorContextManager object at 0x7fa80b6b6250>
type = None, value = None, traceback = None

    def __exit__(self, type, value, traceback):
        if type is None:
            try:
>               next(self.gen)
E               AssertionError: Caused unexpected warning(s): [('FutureWarning', FutureWarning("Sorting because non-concatenation axis is not aligned. A future version\nof pandas will change to not sort by default.\n\nTo accept the future behavior, pass 'sort=False'.\n\nTo retain the current behavior and silence the warning, pass 'sort=True'.\n"), '/home/user/BugsInPy/temp/projects/pandas/pandas/core/frame.py', 7216)].

/opt/conda/envs/775655ef980447a42ac9606500def970/lib/python3.8/contextlib.py:120: AssertionError